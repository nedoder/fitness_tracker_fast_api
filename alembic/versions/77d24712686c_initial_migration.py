"""Initial migration

Revision ID: 77d24712686c
Revises: 
Create Date: 2024-08-06 12:40:28.191952

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '77d24712686c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Create ENUM types with checkfirst=True
    genderenum = postgresql.ENUM('MALE', 'FEMALE', 'OTHER', name='genderenum', create_type=False)
    genderenum.create(op.get_bind(), checkfirst=True)

    levelenum = postgresql.ENUM('BEGINNER', 'INTERMEDIATE', 'ADVANCED', 'EXPERT', name='levelenum', create_type=False)
    levelenum.create(op.get_bind(), checkfirst=True)

    bodypartenum = postgresql.ENUM('UPPER_BODY', 'LOWER_BODY', 'FULL_BODY', 'CORE', 'ARMS', 'LEGS', 'BACK', 'SHOULDERS', name='bodypartenum', create_type=False)
    bodypartenum.create(op.get_bind(), checkfirst=True)

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('date_of_birth', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('gender', genderenum, autoincrement=False, nullable=True),
    sa.Column('height', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('weight', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('date_joined', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_username', 'users', ['username'], unique=True)
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=True)

    op.create_table('levels',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('levels_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', levelenum, autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='levels_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_levels_name', 'levels', ['name'], unique=True)
    op.create_index('ix_levels_id', 'levels', ['id'], unique=False)

    op.create_table('body_parts',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('body_parts_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', bodypartenum, autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='body_parts_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_body_parts_name', 'body_parts', ['name'], unique=True)
    op.create_index('ix_body_parts_id', 'body_parts', ['id'], unique=False)

    op.create_table('exercises',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('exercises_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('level_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('body_part_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('calories_burned_per_minute', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['body_part_id'], ['body_parts.id'], name='exercises_body_part_id_fkey'),
    sa.ForeignKeyConstraint(['level_id'], ['levels.id'], name='exercises_level_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='exercises_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_exercises_name', 'exercises', ['name'], unique=True)
    op.create_index('ix_exercises_id', 'exercises', ['id'], unique=False)

    op.create_table('trainings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('duration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('calories_burned', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='trainings_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='trainings_pkey')
    )
    op.create_index('ix_trainings_id', 'trainings', ['id'], unique=False)

    op.create_table('exercise_instances',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('training_session_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('exercise_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reps', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sets', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('weight', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('duration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['exercise_id'], ['exercises.id'], name='exercise_instances_exercise_id_fkey'),
    sa.ForeignKeyConstraint(['training_session_id'], ['trainings.id'], name='exercise_instances_training_session_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='exercise_instances_pkey')
    )
    op.create_index('ix_exercise_instances_id', 'exercise_instances', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_exercise_instances_id', table_name='exercise_instances')
    op.drop_table('exercise_instances')
    op.drop_index('ix_exercises_id', table_name='exercises')
    op.drop_index('ix_exercises_name', table_name='exercises')
    op.drop_table('exercises')
    op.drop_index('ix_trainings_id', table_name='trainings')
    op.drop_table('trainings')
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_id', table_name='users')
    op.drop_index('ix_users_username', table_name='users')
    op.drop_table('users')
    op.drop_index('ix_levels_id', table_name='levels')
    op.drop_index('ix_levels_name', table_name='levels')
    op.drop_table('levels')
    op.drop_index('ix_body_parts_id', table_name='body_parts')
    op.drop_index('ix_body_parts_name', table_name='body_parts')
    op.drop_table('body_parts')

     # Drop ENUM types with checkfirst=True
    genderenum = postgresql.ENUM('MALE', 'FEMALE', 'OTHER', name='genderenum', create_type=False)
    genderenum.drop(op.get_bind(), checkfirst=True)

    levelenum = postgresql.ENUM('BEGINNER', 'INTERMEDIATE', 'ADVANCED', 'EXPERT', name='levelenum', create_type=False)
    levelenum.drop(op.get_bind(), checkfirst=True)

    bodypartenum = postgresql.ENUM('UPPER_BODY', 'LOWER_BODY', 'FULL_BODY', 'CORE', 'ARMS', 'LEGS', 'BACK', 'SHOULDERS', name='bodypartenum', create_type=False)
    bodypartenum.drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###